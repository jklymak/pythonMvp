# -*- coding: utf-8 -*-
"""
Created on Mon May 06 11:59:41 2013

@author: FoxR
"""

#def MVP_plots():
if 1:
  import cPickle as pickle
  import numpy as np
  import matplotlib
  
  matplotlib.use('TkAgg')
  import matplotlib.pyplot as plt
  import matplotlib.dates  as mdates
  import matplotlib.gridspec as gridspec
  import time
  
  
  surveygridname='C:/cygwin/home/analysis/Test/mvp/pickleGrid/surveyA.pickle'
  density_contours = np.arange(1024, 1029, 1)    
  ncasts=50
      
  todo3=['temp','salinity','analog']
  clim3=[[4,12],[30,32],[0,5]]
  title3=['Temp [C]','S [psu]','Analog [V]']
  ylims3=[220,0] 
      
  plt.ion()
  
  while 1:
    with  open(surveygridname,"rb") as pickf:
      grid_full=pickle.load(pickf)
  
    #def MVP_plots(grid_full):
    if 1:    
        
        print "MVP Plots"
        fig1 = plt.figure(1,(14,9.5))
        plt.show()
        fig1.clf()
    
        # grid layout:
        gs3b3 = gridspec.GridSpec(3,3)
        # MVP Plots
        
        #plt.ion()
        plt.ioff
        X = grid_full['cast_number']
        Y = grid_full['depths']
            
        def contourZ(X,Y,Z,D,contours,cl,tit):
          pc = plt.pcolormesh(X,Y,Z, vmin = cl[0], vmax = cl[1],rasterized=True)
          cb = plt.colorbar(pc, format = '%2.1f', orientation = 'vertical', pad = 0.08)
          cb.set_label(tit, fontweight='bold')
          co = plt.contour(X, Y, D-1000.,contours-1000., colors = 'k')
          plt.clabel(co, colors = 'k', fmt = '%4.0f', fontsize = 7, use_clabeltext = True)
          plt.ylim(ylims3)
          plt.xlim(X[-1]+np.array([-ncasts,0]))
          
        ax=[]
        for num,ind,clim,tit in zip([1,2,3],todo3,clim3,title3):
          Z = grid_full[ind]  
          print clim
          print ind
          print tit
          ax.append(plt.subplot(gs3b3[num-1,0:2]))
          contourZ(X,Y,Z,grid_full['density'],density_contours,clim,tit)
        plt.xlabel('Cast #')
        plt.ylabel('DEPTH [m]')
        #contourZ(X,Y,Z,density_contours,(cmin,cmax))
        #cb.set_label('Temp (degC)', fontweight='bold')
        #cmin = np.nanmin(Z)
        #cmax = np.nanmax(Z)
        
        starttime = mdates.num2date(grid_full['mtime'][0]).strftime('%Y-%m-%d %H:%M:%S')
        endtime = mdates.num2date(grid_full['mtime'][-1]).strftime('%H:%M:%S')
        #endtime = (datetime.datetime.fromtimestamp(grid_full['unixtime'][0,-1])).strftime('%Y-%m-%d %H:%M:%S')
        startendstring = ('Cast '+ str(int(grid_full['cast_number'][0])) + 
           ' at ' + starttime +' \nCast '+ str(int(grid_full['cast_number'][-1])) + ' at ' + endtime) 
        ax[0].set_title(startendstring,fontsize = 12)
        
        ### TS plot    
        plt.subplot(gs3b3[0,2])
        plt.plot(grid_full['salinity'][:,-ncasts:],grid_full['temp'][:,-ncasts:],'k.',markersize=1)  
        plt.plot(grid_full['salinity'][:,-2],grid_full['temp'][:,-2],'m.')  
        plt.plot(grid_full['salinity'][:,-1],grid_full['temp'][:,-1],'r.')  
        plt.xlabel('S [psu]')
        plt.ylabel('T [C]')
        #plt.draw()
        
#     
        axgeo=plt.subplot(gs3b3[1:3,2])
        plt.plot(grid_full['longitude'][-ncasts:],grid_full['latitude'][-ncasts:],'k.',markersize=3)  
        plt.plot(grid_full['longitude'][-1],grid_full['latitude'][-1],'rd',markersize=12)  
        plt.xlabel('Lon [o]')
        plt.ylabel('Lat [o]')
        axgeo.set_aspect(1./np.cos(np.mean(np.pi/180.*grid_full['latitude'])))
     
        plt.draw()
        time.sleep(20.)
        print 'Redraw!'
#    plt.savefig('C:\\Rowan\\MVP\\dat\\testcopyfolder\\test')#, format = 'png')
    
    

    




